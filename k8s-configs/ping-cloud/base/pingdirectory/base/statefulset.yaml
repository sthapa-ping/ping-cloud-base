# This defines the deployment (as a stateful set) of the pingdirectory servers

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingdirectory
  labels:
    class: pingdirectory-server
spec:
  serviceName: pingdirectory
  replicas: 2
  selector:
    matchLabels:
      class: pingdirectory-server
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      annotations:
        lastUpdateReason: "NA"
      labels:
        class: pingdirectory-server
    spec:
      serviceAccount: ping-serviceaccount
      affinity:
        podAntiAffinity:
          # Add a hard requirement for each PD pod to be deployed to a different node
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - pingdirectory
            topologyKey: "kubernetes.io/hostname"
          # Add a soft requirement for each PD pod to be deployed to a different AZ
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingdirectory
              topologyKey: "failure-domain.beta.kubernetes.io/zone"
      terminationGracePeriodSeconds: 300
      initContainers:
      - name: pingdirectory-init
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: bitnami/kubectl:1.15.3
        imagePullPolicy: IfNotPresent
        command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        volumeMounts:
        - name: ssh-dir
          mountPath: /.ssh
        - name: data-dir
          mountPath: /data
        - name: pingdirectory-init
          mountPath: /copy-dependencies.sh
          subPath: copy-dependencies.sh
        - name: pingdirectory-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
      - name: wait-for-services
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: busybox:1.32
        imagePullPolicy: IfNotPresent
        command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        volumeMounts:
        - name: pingdirectory-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        - name: pingdirectory-init
          mountPath: /wait-for-services.sh
          subPath: wait-for-services.sh
      containers:
      - name: pingdirectory
        image: pingcloud-docker.jfrog.io/pingidentity/pingdirectory:2006.1-8.1.0.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 1389
          name: ldap
        - containerPort: 1636
          name: ldaps
        - containerPort: 1443
          name: https
        - containerPort: 8989
          name: repl
        resources:
          requests:
            memory: "5Gi"
            cpu: "2"
        env:
        - name: P14C_ENVIRONMENT_ID
          valueFrom:
            secretKeyRef:
              name: pingdirectory-passwords
              key: P14C_ENVIRONMENT_ID
        - name: P14C_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: pingdirectory-passwords
              key: P14C_CLIENT_ID
        - name: P14C_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: pingdirectory-passwords
              key: P14C_CLIENT_SECRET
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingdirectory-passwords
              key: root-user-password
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_ADMIN_USER_PASSWORD
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_LDAP_PASSWORD
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        - secretRef:
            name: git-auth-cred
            optional: true
        volumeMounts:
        # FIXME: fix home directory when containers run as non-root user
        - name: ssh-dir
          mountPath: /root/.ssh
        - name: topology-descriptor
          mountPath: /opt/staging/topology/descriptor.json
          subPath: descriptor.json
        - name: data-dir
          mountPath: /opt/staging/topology.json
          subPath: topology.json
        - name: data-dir
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: data-dir
          mountPath: /usr/local/bin/skbn
          subPath: skbn
        - name: out-dir
          mountPath: /opt/out
        - name: pingdirectory-passwords
          mountPath: /usr/local/secrets
          readOnly: true
        - name: pingdirectory-license
          mountPath: /opt/in/instance/PingDirectory.lic
          subPath: PingDirectory.lic
        - name: data-dir
          mountPath: /opt/staging/ds_env_vars
          subPath: ds_env_vars
        readinessProbe:
          exec:
            command:
              - /opt/staging/hooks/85-readiness.sh
          # Do not start the readiness probe for 3 minutes after starting the
          # container because PD will never finish its start/restart sequence
          # before then, in practice. Run the readiness probe every 5 seconds
          # and tolerate up to 3 failures, so PD cannot falsely be considered
          # READY for more than 15 seconds in a row.
          initialDelaySeconds: 180
          periodSeconds: 5
          failureThreshold: 3
        livenessProbe:
          exec:
            command: [ liveness.sh ]
          # Health checks will kick in 10 minutes after the pod starts up.
          initialDelaySeconds: 600
          periodSeconds: 30
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/hooks/86-pre-stop.sh
      - name: pingdirectory-statsd-exporter
        image: prom/statsd-exporter:v0.14.1
        args:
        - "--statsd.mapping-config=/tmp/mapping/pingdirectory-statsd-mapping.yml"
        - "--statsd.listen-udp=:8125"
        - "--web.listen-address=:9102"
        ports:
          - containerPort: 9102
            protocol: TCP
          - containerPort: 8125
            protocol: UDP
        volumeMounts:
          - mountPath: /tmp/mapping/
            name: pingdirectory-statsd-mapping
            readOnly: false
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
      volumes:
      - name: ssh-dir
        emptyDir: {}
      - name: data-dir
        emptyDir: {}
      - name: pingdirectory-init
        configMap:
          name: pingcommon-init
          defaultMode: 0555
      - name: topology-descriptor
        configMap:
          name: topology-descriptor
          optional: true
          defaultMode: 0644
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingdirectory-license
        secret:
          secretName: pingdirectory-license
          optional: true
          defaultMode: 0400
      - name: pingdirectory-passwords
        secret:
          secretName: pingdirectory-passwords
          optional: true
          defaultMode: 0400
      - name: pingdirectory-statsd-mapping
        configMap:
          name: pingdirectory-statsd-mapping
  volumeClaimTemplates:
  - metadata:
      name: out-dir
      labels:
        class: pingdirectory-server
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: pingdirectory-gp2
      resources:
        requests:
          storage: 40Gi
