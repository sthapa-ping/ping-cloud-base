apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-restore
data:
  restore.sh: |
    #!/bin/sh
    set -e

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    RESTORE_FILES=
    SCRIPT="${HOOKS_DIR}"/90-restore-backup-s3.sh
    LOG_FILE=/tmp/restore.log

    test -z "${BACKUP_RESTORE_POD}" && SERVER="${K8S_STATEFUL_SET_NAME}-0" || SERVER="${BACKUP_RESTORE_POD}"

    NUM_REPLICAS=$(/tmp/kubectl get statefulset "${K8S_STATEFUL_SET_NAME}" -o jsonpath='{.spec.replicas}')
    echo "restore: number of replicas: ${NUM_REPLICAS}"

    DN_LIST=
    BASE_DNS_LIST="${USER_BASE_DN} ${USER_BASE_DN_2} ${USER_BASE_DN_3} ${USER_BASE_DN_4} ${USER_BASE_DN_5}"
    # Separate each USER_BASE_DN with a ';'
    BASE_DNS_LIST=$(echo ${BASE_DNS_LIST} | tr '[[:blank:]]/' ';')

    if test -z "${REPLICATION_BASE_DNS}"; then
      DN_LIST="${BASE_DNS_LIST}"
    else
    # Separate each USER_BASE_DN with a '|' to grep with a regex pattern.
    # Example: grep -qE "dc=example,dc=com|dc=test,dc=com"

      GREP_BASE_DNS_LIST=$(echo ${BASE_DNS_LIST} | tr ';' '|')
      if echo "${REPLICATION_BASE_DNS}" | grep -qE "${GREP_BASE_DNS_LIST}"; then
        DN_LIST="${REPLICATION_BASE_DNS}"
      else
        DN_LIST="${REPLICATION_BASE_DNS};${BASE_DNS_LIST}"
      fi
    fi
    DNS_LIST=$(echo "${DN_LIST}" | tr ';' ' ')
    
    pause_replication () {
      if "${PAUSE_REPLICATION_BEFORE_RESTORE}" && test ${NUM_REPLICAS} -gt 1; then
        echo "Executing pre-initialization from within ${SERVER} pod for DNs: ${DNS_LIST}"
        for DN in ${DNS_LIST}; do
          /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c \
            "dsreplication pre-external-initialization \
              --retryTimeoutSeconds \"${RETRY_TIMEOUT_SECONDS}\" \
              --baseDN \"${DN}\" \
              --no-prompt --ignoreWarnings"
        done
      fi
    }

    resume_replication() {
      if "${PAUSE_REPLICATION_BEFORE_RESTORE}" && test ${NUM_REPLICAS} -gt 1; then
        echo "Initializing replication from within ${SERVER} pod for DNs: ${DN_LIST} "
        for DN in ${DNS_LIST}; do
          /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c \
            "dsreplication initialize-all \
              --retryTimeoutSeconds \"${RETRY_TIMEOUT_SECONDS}\" \
              --baseDN \"${DN}\" \
              --no-prompt --ignoreWarnings"
        done

        echo "Executing post-initialization from within ${SERVER} pod for DNs: ${DNS_LIST}"
        for DN in ${DNS_LIST}; do
          /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c \
            "dsreplication post-external-initialization \
              --retryTimeoutSeconds \"${RETRY_TIMEOUT_SECONDS}\" \
              --baseDN \"${DN}\" \
              --no-prompt --ignoreWarnings"
        done
      fi
    }

    # This guarantees that resume_replication is always run, even if the restore job exits due to an error
    trap "resume_replication" EXIT

    pause_replication

    echo "Running restore script within ${SERVER} pod"
    /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c \
        "test -x ${SCRIPT} && \
            export BACKUP_FILE_NAME=${BACKUP_FILE_NAME} && \
            ${SCRIPT}"> "${LOG_FILE}"

    if test ${?} -eq 0; then
      # Sending logs to STDOUT
      cat ${LOG_FILE}
      RESTORE_FILE=$(tail -1 "${LOG_FILE}")
      test -z "${RESTORE_FILES}" && RESTORE_FILES="${RESTORE_FILE}" || RESTORE_FILES="${RESTORE_FILES} ${RESTORE_FILE}"
    else
      echo "Restore script not found on server ${SERVER}"
    fi


    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were restored:"
    echo "${RESTORE_FILES}"

    echo "Deleting PingDirectory restore pvc"
    /tmp/kubectl delete pvc pingdirectory-restore
---
# Persistent Volume to run restore process
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pingdirectory-restore
  labels:
    class: pingdirectory-server
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: pingdirectory-enc-gp2
  resources:
    requests:
      storage: 40Gi

---
# A manual restore can be performed by deploying this job. It will restore
# data that was backed up by the periodic backup job to pingdirectory-0. All other servers
# must initialize the data from pingdirectory-0 via dsreplication initialize-all. This
# job can also be used to load the data initially from a backup created in
# another environment, e.g. dev.
apiVersion: batch/v1
kind: Job
metadata:
  name: pingdirectory-restore
  labels:
    app: ping-cloud
    role: pingdirectory
spec:
  ttlSecondsAfterFinished: 30
  backoffLimit: 0
  template:
    spec:
      serviceAccount: ping-serviceaccount
      restartPolicy: Never
      containers:
      - name: pingdirectory-restore
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdirectory/dev:v1.18-release-branch-latest
        imagePullPolicy: Always
        command:
        - /opt/in/restore.sh
        volumeMounts:
        - name: restore-script
          mountPath: /opt/in/restore.sh
          subPath: restore.sh
        - name: pd-restore-volume
          mountPath: /opt/out/restore
          subPath: restore
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        env:
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
      volumes:
      - name: restore-script
        configMap:
          name: pingdirectory-restore
          defaultMode: 0555
      - name: pd-restore-volume
        persistentVolumeClaim:
          claimName: pingdirectory-restore