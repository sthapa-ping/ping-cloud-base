apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pingdirectory-backup-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: pingdirectory-gp2
  resources:
    requests:
      storage: 20Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup
data:
  backup.sh: |-
    #!/bin/sh
    set -e

    test -z "${BACKUP_RESTORE_POD}" && SERVER="${K8S_STATEFUL_SET_NAME}-0" || SERVER="${BACKUP_RESTORE_POD}"

    echo "Running backup script within ${SERVER} pod"

    # This is the backup directory on server 0
    SERVER_BACKUP_DIR="${OUT_DIR}/backup"

    echo "Doing a full backup of ${USER_BACKEND_ID} backend to ${BACKUP_DIR}"
    "${SERVER_BITS_DIR}/bin/backup" --task \
      --useSSL --trustAll \
      --hostname "${SERVER}.${K8S_STATEFUL_SET_SERVICE_NAME}" \
      --port ${LDAPS_PORT} \
      --bindDN "${ROOT_USER_DN}" \
      --bindPasswordFile "${ROOT_USER_PASSWORD_FILE}" \
      --backupDirectory "${SERVER_BACKUP_DIR}" \
      --backendID "${USER_BACKEND_ID}" \
      --compress \
      --retainPreviousFullBackupAge 1d

    # Install kubectl
    echo "Installing kubectl"
    curl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
    chmod +x /usr/local/bin/kubectl

    OLD_BACKUP_DIRS=$(find "${BACKUP_DIR}" -name backup-\* -type d)
    echo "Old backup directories: ${OLD_BACKUP_DIRS}"

    NEW_BACKUP_DIR="${BACKUP_DIR}/backup-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "${NEW_BACKUP_DIR}"

    echo "Copying backup from ${SERVER}:${SERVER_BACKUP_DIR} to ${NEW_BACKUP_DIR}"
    kubectl cp "${SERVER}:${SERVER_BACKUP_DIR}" "${NEW_BACKUP_DIR}" -c pingdirectory

    echo "Changing current backup to point to ${NEW_BACKUP_DIR}"
    CURRENT_BACKUP_DIR="${BACKUP_DIR}/current"
    ln -snf "${NEW_BACKUP_DIR}" "${CURRENT_BACKUP_DIR}"

    echo "Removing old backup directories: ${OLD_BACKUP_DIRS}"
    echo "${OLD_BACKUP_DIRS}" | xargs rm -rf

    echo "Backup directory contents:"
    ls -latr "${BACKUP_DIR}"

    echo "Current backup contents:"
    ls "${CURRENT_BACKUP_DIR}"

---

# Do a full backup of the user backend every 6 hours and retain the backups
# for a day. This goes into a separate persistent volume than the data attached
# to each pingdirectory server.

# A manual restore can be performed using the restore job (restore.yaml) when
# necessary.
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: pingdirectory-periodic-backup
spec:
  schedule: "0 */6 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccount: ping-serviceaccount
          restartPolicy: OnFailure
          containers:
          - name: pingdirectory-backup
            image: pingcloud-docker.jfrog.io/pingidentity/pingdirectory:2006.1-8.1.0.2
            command:
            - /opt/in/backup.sh
            env:
            - name: BACKUP_DIR
              value: /pd_backups
            envFrom:
            - configMapRef:
                name: pingdirectory-environment-variables
            volumeMounts:
            - name: passwords
              mountPath: /usr/local/secrets
              readOnly: true
            - name: backup-volume
              mountPath: /pd_backups
            - name: backup-script
              mountPath: /opt/in/backup.sh
              subPath: backup.sh
          volumes:
          - name: passwords
            secret:
              secretName: pingdirectory-passwords
              defaultMode: 0400
          - name: backup-script
            configMap:
              name: pingdirectory-backup
              defaultMode: 0555
          - name: backup-volume
            persistentVolumeClaim:
              claimName: pingdirectory-backup-pvc